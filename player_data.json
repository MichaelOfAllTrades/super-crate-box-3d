{
  "children": [
    {
      "name": "CollisionShape3D",
      "properties": {
        "_import_path": "",
        "auto_translate_mode": 0,
        "debug_color": "(0.0, 0.6, 0.7, 0.42)",
        "debug_fill": true,
        "disabled": false,
        "editor_description": "",
        "physics_interpolation_mode": 0,
        "position": "(0.0, 0.0, 0.0)",
        "process_mode": 0,
        "process_physics_priority": 0,
        "process_priority": 0,
        "process_thread_group": 0,
        "rotation": "(0.0, 0.0, 0.0)",
        "rotation_edit_mode": 0,
        "rotation_order": 2,
        "scale": "(1.5, 2.0, 1.5)",
        "script": null,
        "shape": "res://player/player.tscn::CapsuleShape3D_sh265",
        "top_level": false,
        "transform": "[X: (1.5, 0.0, 0.0), Y: (0.0, 2.0, 0.0), Z: (0.0, 0.0, 1.5), O: (0.0, 0.0, 0.0)]",
        "unique_name_in_owner": false,
        "visibility_parent": "",
        "visible": true
      },
      "type": "CollisionShape3D"
    },
    {
      "name": "MeshInstance3D",
      "properties": {
        "_import_path": "",
        "auto_translate_mode": 0,
        "cast_shadow": 1,
        "custom_aabb": "[P: (0.0, 0.0, 0.0), S: (0.0, 0.0, 0.0)]",
        "editor_description": "",
        "extra_cull_margin": 0.0,
        "gi_lightmap_texel_scale": 1.0,
        "gi_mode": 1,
        "ignore_occlusion_culling": false,
        "layers": 1,
        "lod_bias": 1.0,
        "material_overlay": "<Object#null>",
        "material_override": "res://player/player.tscn::StandardMaterial3D_4flbx",
        "mesh": "res://player/player.tscn::CapsuleMesh_onrkg",
        "physics_interpolation_mode": 0,
        "position": "(0.0, 0.0, 0.0)",
        "process_mode": 0,
        "process_physics_priority": 0,
        "process_priority": 0,
        "process_thread_group": 0,
        "rotation": "(0.0, 0.0, 0.0)",
        "rotation_edit_mode": 0,
        "rotation_order": 2,
        "scale": "(1.5, 2.0, 1.5)",
        "script": null,
        "skeleton": "..",
        "skin": "<Object#null>",
        "sorting_offset": 0.0,
        "sorting_use_aabb_center": true,
        "surface_material_override/0": "<Object#null>",
        "top_level": false,
        "transform": "[X: (1.5, 0.0, 0.0), Y: (0.0, 2.0, 0.0), Z: (0.0, 0.0, 1.5), O: (0.0, 0.0, 0.0)]",
        "transparency": 0.0,
        "unique_name_in_owner": false,
        "visibility_parent": "",
        "visibility_range_begin": 0.0,
        "visibility_range_begin_margin": 0.0,
        "visibility_range_end": 0.0,
        "visibility_range_end_margin": 0.0,
        "visibility_range_fade_mode": 0,
        "visible": true
      },
      "type": "MeshInstance3D"
    },
    {
      "children": [
        {
          "name": "Camera3D",
          "properties": {
            "_import_path": "",
            "attributes": "<Object#null>",
            "auto_translate_mode": 0,
            "compositor": "<Object#null>",
            "cull_mask": 1048575,
            "current": true,
            "doppler_tracking": 0,
            "editor_description": "",
            "environment": "<Object#null>",
            "far": 8000.0,
            "fov": 75.0,
            "frustum_offset": "(0.0, 0.0)",
            "h_offset": 0.0,
            "keep_aspect": 1,
            "near": 0.0500000007450581,
            "physics_interpolation_mode": 0,
            "position": "(0.0, 0.0, 0.0)",
            "process_mode": 0,
            "process_physics_priority": 0,
            "process_priority": 0,
            "process_thread_group": 0,
            "projection": 0,
            "rotation": "(0.0, 0.0, 0.0)",
            "rotation_edit_mode": 0,
            "rotation_order": 2,
            "scale": "(1.0, 1.0, 1.0)",
            "script": null,
            "size": 1.0,
            "top_level": false,
            "transform": "[X: (1.0, 0.0, 0.0), Y: (0.0, 1.0, 0.0), Z: (0.0, 0.0, 1.0), O: (0.0, 0.0, 0.0)]",
            "unique_name_in_owner": false,
            "v_offset": 0.0,
            "visibility_parent": "",
            "visible": true
          },
          "type": "Camera3D"
        },
        {
          "children": [
            {
              "children": [
                {
                  "name": "MeshInstance3D",
                  "properties": {
                    "_import_path": "",
                    "auto_translate_mode": 0,
                    "cast_shadow": 1,
                    "custom_aabb": "[P: (0.0, 0.0, 0.0), S: (0.0, 0.0, 0.0)]",
                    "editor_description": "",
                    "extra_cull_margin": 0.0,
                    "gi_lightmap_texel_scale": 1.0,
                    "gi_mode": 1,
                    "ignore_occlusion_culling": false,
                    "layers": 1,
                    "lod_bias": 1.0,
                    "material_overlay": "<Object#null>",
                    "material_override": "<Object#null>",
                    "mesh": "res://weapons/weapon_visual.tscn::BoxMesh_n6cac",
                    "physics_interpolation_mode": 0,
                    "position": "(0.0, 0.0, 0.0)",
                    "process_mode": 0,
                    "process_physics_priority": 0,
                    "process_priority": 0,
                    "process_thread_group": 0,
                    "rotation": "(0.0, 0.0, 0.0)",
                    "rotation_edit_mode": 0,
                    "rotation_order": 2,
                    "scale": "(0.085, 0.15, 0.5)",
                    "script": null,
                    "skeleton": "..",
                    "skin": "<Object#null>",
                    "sorting_offset": 0.0,
                    "sorting_use_aabb_center": true,
                    "surface_material_override/0": "<Object#null>",
                    "top_level": false,
                    "transform": "[X: (0.085, 0.0, 0.0), Y: (0.0, 0.15, 0.0), Z: (0.0, 0.0, 0.5), O: (0.0, 0.0, 0.0)]",
                    "transparency": 0.0,
                    "unique_name_in_owner": false,
                    "visibility_parent": "",
                    "visibility_range_begin": 0.0,
                    "visibility_range_begin_margin": 0.0,
                    "visibility_range_end": 0.0,
                    "visibility_range_end_margin": 0.0,
                    "visibility_range_fade_mode": 0,
                    "visible": true
                  },
                  "type": "MeshInstance3D"
                },
                {
                  "name": "Label3D",
                  "properties": {
                    "_import_path": "",
                    "alpha_antialiasing_edge": 0.0,
                    "alpha_antialiasing_mode": 0,
                    "alpha_cut": 0,
                    "alpha_hash_scale": 1.0,
                    "alpha_scissor_threshold": 0.5,
                    "auto_translate_mode": 0,
                    "autowrap_mode": 0,
                    "billboard": 0,
                    "cast_shadow": 0,
                    "custom_aabb": "[P: (0.0, 0.0, 0.0), S: (0.0, 0.0, 0.0)]",
                    "double_sided": true,
                    "editor_description": "",
                    "extra_cull_margin": 0.0,
                    "fixed_size": false,
                    "font": "<Object#null>",
                    "font_size": 10,
                    "gi_lightmap_scale": 0,
                    "gi_lightmap_texel_scale": 1.0,
                    "gi_mode": 0,
                    "horizontal_alignment": 1,
                    "ignore_occlusion_culling": false,
                    "justification_flags": 163,
                    "language": "",
                    "layers": 1,
                    "line_spacing": 0.0,
                    "lod_bias": 1.0,
                    "material_overlay": "<Object#null>",
                    "material_override": "<Object#null>",
                    "modulate": "(1.0, 1.0, 1.0, 1.0)",
                    "no_depth_test": false,
                    "offset": "(0.0, 0.0)",
                    "outline_modulate": "(0.0, 0.0, 0.0, 1.0)",
                    "outline_render_priority": -1,
                    "outline_size": 12,
                    "physics_interpolation_mode": 0,
                    "pixel_size": 0.00499999988824129,
                    "position": "(-0.043, 0.015, -0.114)",
                    "process_mode": 0,
                    "process_physics_priority": 0,
                    "process_priority": 0,
                    "process_thread_group": 0,
                    "render_priority": 0,
                    "rotation": "(0.0, -1.570796, 0.0)",
                    "rotation_edit_mode": 0,
                    "rotation_order": 2,
                    "scale": "(1.0, 1.0, 1.0)",
                    "script": null,
                    "shaded": false,
                    "sorting_offset": 0.0,
                    "sorting_use_aabb_center": true,
                    "structured_text_bidi_override": 0,
                    "structured_text_bidi_override_options": [],
                    "text": "PISTOL",
                    "text_direction": 0,
                    "texture_filter": 3,
                    "top_level": false,
                    "transform": "[X: (-0.0, 0.0, 1.0), Y: (0.0, 1.0, 0.0), Z: (-1.0, 0.0, -0.0), O: (-0.043, 0.015, -0.114)]",
                    "transparency": 0.0,
                    "unique_name_in_owner": false,
                    "uppercase": false,
                    "vertical_alignment": 1,
                    "visibility_parent": "",
                    "visibility_range_begin": 0.0,
                    "visibility_range_begin_margin": 0.0,
                    "visibility_range_end": 0.0,
                    "visibility_range_end_margin": 0.0,
                    "visibility_range_fade_mode": 0,
                    "visible": true,
                    "width": 500.0
                  },
                  "type": "Label3D"
                },
                {
                  "name": "Muzzle",
                  "properties": {
                    "_import_path": "",
                    "auto_translate_mode": 0,
                    "editor_description": "",
                    "gizmo_extents": 0.25,
                    "physics_interpolation_mode": 0,
                    "position": "(0.0, 0.0, -0.25)",
                    "process_mode": 0,
                    "process_physics_priority": 0,
                    "process_priority": 0,
                    "process_thread_group": 0,
                    "rotation": "(0.0, 0.0, 0.0)",
                    "rotation_edit_mode": 0,
                    "rotation_order": 2,
                    "scale": "(1.0, 1.0, 1.0)",
                    "script": null,
                    "top_level": false,
                    "transform": "[X: (1.0, 0.0, 0.0), Y: (0.0, 1.0, 0.0), Z: (0.0, 0.0, 1.0), O: (0.0, 0.0, -0.25)]",
                    "unique_name_in_owner": false,
                    "visibility_parent": "",
                    "visible": true
                  },
                  "type": "Marker3D"
                },
                {
                  "name": "WeaponLogic",
                  "properties": {
                    "_import_path": "",
                    "auto_translate_mode": 0,
                    "bullet_scene": "res://weapons/bullet.tscn",
                    "editor_description": "",
                    "fire_rate": 0.0,
                    "must_reclick": true,
                    "physics_interpolation_mode": 0,
                    "process_mode": 0,
                    "process_physics_priority": 0,
                    "process_priority": 0,
                    "process_thread_group": 0,
                    "script": "res://weapons/pistol/PistolWeapon.gd",
                    "unique_name_in_owner": false
                  },
                  "script": "# PistolWeapon.gd\n@tool # Allows properties to update in editor potentially\nclass_name PistolWeapon\nextends BaseWeaponLogic\n\n@export var bullet_scene: PackedScene # Assign pistol_bullet.tscn\n\n# Override the base fire method\nfunc fire():\n\tif not bullet_scene:\n\t\tprinterr(\"PistolWeapon: Bullet scene not assigned!\")\n\t\treturn\n\t\n\tprint(\"PIstol firing!\")\n\tvar spawn_transform = get_muzzle_global_transform()\n\t\n\tvar bullet_instance = bullet_scene.instantiate()\n\t# Add to main scene tree (get_tree().root is simple way)\n\tget_tree().root.add_child(bullet_instance) \n\n\t# Set bullet properties (assuming bullet script has these methods/vars)\n\tif bullet_instance.has_method(\"set_initial_direction\"):\n\t\tbullet_instance.set_initial_direction(spawn_transform)\n\t# Example: Override speed if needed\n\t# if bullet_instance.has_variable(\"speed\"): bullet_instance.speed = 50.0\n",
                  "type": "Node"
                }
              ],
              "name": "WeaponVisual",
              "properties": {
                "_import_path": "",
                "auto_translate_mode": 0,
                "editor_description": "",
                "physics_interpolation_mode": 0,
                "position": "(0.0, 0.0, 0.0)",
                "process_mode": 0,
                "process_physics_priority": 0,
                "process_priority": 0,
                "process_thread_group": 0,
                "rotation": "(0.0, 0.0, 0.0)",
                "rotation_edit_mode": 0,
                "rotation_order": 2,
                "scale": "(1.0, 1.0, 1.0)",
                "script": null,
                "top_level": false,
                "transform": "[X: (1.0, 0.0, 0.0), Y: (0.0, 1.0, 0.0), Z: (0.0, 0.0, 1.0), O: (0.0, 0.0, 0.0)]",
                "unique_name_in_owner": false,
                "visibility_parent": "",
                "visible": true
              },
              "scene_file_path": "res://weapons/pistol/pistol_visual.tscn",
              "type": "Node3D"
            }
          ],
          "name": "WeaponHolder",
          "properties": {
            "_import_path": "",
            "auto_translate_mode": 0,
            "editor_description": "",
            "physics_interpolation_mode": 0,
            "position": "(0.237912, 0.0, -0.218823)",
            "process_mode": 0,
            "process_physics_priority": 0,
            "process_priority": 0,
            "process_thread_group": 0,
            "rotation": "(0.0, 0.0, 0.0)",
            "rotation_edit_mode": 0,
            "rotation_order": 2,
            "scale": "(1.0, 1.0, 1.0)",
            "script": null,
            "top_level": false,
            "transform": "[X: (1.0, 0.0, 0.0), Y: (0.0, 1.0, 0.0), Z: (0.0, 0.0, 1.0), O: (0.237912, 0.0, -0.218823)]",
            "unique_name_in_owner": false,
            "visibility_parent": "",
            "visible": true
          },
          "type": "Node3D"
        }
      ],
      "name": "Head",
      "properties": {
        "_import_path": "",
        "auto_translate_mode": 0,
        "editor_description": "",
        "physics_interpolation_mode": 0,
        "position": "(0.0, 1.45287, 0.0)",
        "process_mode": 0,
        "process_physics_priority": 0,
        "process_priority": 0,
        "process_thread_group": 0,
        "rotation": "(0.01, 0.0, 0.0)",
        "rotation_edit_mode": 0,
        "rotation_order": 2,
        "scale": "(1.0, 1.0, 1.0)",
        "script": null,
        "top_level": false,
        "transform": "[X: (1.0, 0.0, 0.0), Y: (0.0, 0.99995, 0.01), Z: (0.0, -0.01, 0.99995), O: (0.0, 1.45287, 0.0)]",
        "unique_name_in_owner": false,
        "visibility_parent": "",
        "visible": true
      },
      "type": "Node3D"
    },
    {
      "children": [
        {
          "children": [
            {
              "name": "RearViewport",
              "properties": {
                "_import_path": "",
                "anisotropic_filtering_level": 2,
                "audio_listener_enable_2d": false,
                "audio_listener_enable_3d": false,
                "auto_translate_mode": 0,
                "canvas_cull_mask": 4294967295,
                "canvas_item_default_texture_filter": 1,
                "canvas_item_default_texture_repeat": 0,
                "debug_draw": 0,
                "disable_3d": false,
                "editor_description": "",
                "fsr_sharpness": 0.200000002980232,
                "gui_disable_input": false,
                "gui_embed_subwindows": false,
                "gui_snap_controls_to_pixels": true,
                "handle_input_locally": false,
                "mesh_lod_threshold": 1.0,
                "msaa_2d": 0,
                "msaa_3d": 0,
                "own_world_3d": false,
                "physics_interpolation_mode": 1,
                "physics_object_picking": false,
                "physics_object_picking_first_only": false,
                "physics_object_picking_sort": false,
                "positional_shadow_atlas_16_bits": true,
                "positional_shadow_atlas_quad_0": 2,
                "positional_shadow_atlas_quad_1": 2,
                "positional_shadow_atlas_quad_2": 3,
                "positional_shadow_atlas_quad_3": 4,
                "positional_shadow_atlas_size": 2048,
                "process_mode": 0,
                "process_physics_priority": 0,
                "process_priority": 0,
                "process_thread_group": 0,
                "render_target_clear_mode": 0,
                "render_target_update_mode": 0,
                "scaling_3d_mode": 0,
                "scaling_3d_scale": 1.0,
                "screen_space_aa": 0,
                "script": null,
                "sdf_oversize": 1,
                "sdf_scale": 1,
                "size": "(640, 360)",
                "size_2d_override": "(0, 0)",
                "size_2d_override_stretch": false,
                "snap_2d_transforms_to_pixel": false,
                "snap_2d_vertices_to_pixel": false,
                "texture_mipmap_bias": 0.0,
                "transparent_bg": false,
                "unique_name_in_owner": false,
                "use_debanding": false,
                "use_hdr_2d": false,
                "use_occlusion_culling": false,
                "use_taa": false,
                "use_xr": false,
                "vrs_mode": 0,
                "vrs_texture": "<Object#null>",
                "vrs_update_mode": 1,
                "world_3d": ""
              },
              "type": "SubViewport"
            }
          ],
          "name": "RearViewContainer",
          "properties": {
            "_import_path": "",
            "anchor_bottom": 0.0,
            "anchor_left": 0.0,
            "anchor_right": 0.0,
            "anchor_top": 0.0,
            "anchors_preset": 0,
            "auto_translate_mode": 0,
            "clip_children": 0,
            "clip_contents": false,
            "custom_minimum_size": "(0.0, 0.0)",
            "editor_description": "",
            "focus_mode": 1,
            "focus_neighbor_bottom": "",
            "focus_neighbor_left": "",
            "focus_neighbor_right": "",
            "focus_neighbor_top": "",
            "focus_next": "",
            "focus_previous": "",
            "grow_horizontal": 1,
            "grow_vertical": 1,
            "layout_direction": 0,
            "layout_mode": 3,
            "light_mask": 1,
            "localize_numeral_system": true,
            "material": "<Object#null>",
            "modulate": "(1.0, 1.0, 1.0, 1.0)",
            "mouse_default_cursor_shape": 0,
            "mouse_filter": 1,
            "mouse_force_pass_scroll_events": true,
            "mouse_target": false,
            "offset_bottom": 370.0,
            "offset_left": 10.0,
            "offset_right": 650.0,
            "offset_top": 10.0,
            "physics_interpolation_mode": 2,
            "pivot_offset": "(0.0, 0.0)",
            "position": "(10.0, 10.0)",
            "process_mode": 0,
            "process_physics_priority": 0,
            "process_priority": 0,
            "process_thread_group": 0,
            "rotation": 0.0,
            "scale": "(1.0, 1.0)",
            "script": null,
            "self_modulate": "(1.0, 1.0, 1.0, 1.0)",
            "shortcut_context": "<Object#null>",
            "show_behind_parent": false,
            "size": "(640.0, 360.0)",
            "size_flags_horizontal": 1,
            "size_flags_stretch_ratio": 1.0,
            "size_flags_vertical": 1,
            "stretch": true,
            "stretch_shrink": 1,
            "texture_filter": 0,
            "texture_repeat": 0,
            "theme": "<Object#null>",
            "theme_type_variation": "",
            "tooltip_auto_translate_mode": 0,
            "tooltip_text": "",
            "top_level": false,
            "unique_name_in_owner": false,
            "use_parent_material": false,
            "visibility_layer": 1,
            "visible": false,
            "y_sort_enabled": false,
            "z_as_relative": true,
            "z_index": 0
          },
          "type": "SubViewportContainer"
        }
      ],
      "name": "CanvasLayer",
      "properties": {
        "_import_path": "",
        "auto_translate_mode": 0,
        "editor_description": "",
        "follow_viewport_enabled": false,
        "follow_viewport_scale": 1.0,
        "layer": 1,
        "offset": "(0.0, 0.0)",
        "physics_interpolation_mode": 0,
        "process_mode": 0,
        "process_physics_priority": 0,
        "process_priority": 0,
        "process_thread_group": 0,
        "rotation": 0.0,
        "scale": "(1.0, 1.0)",
        "script": null,
        "transform": "[X: (1.0, 0.0), Y: (0.0, 1.0), O: (0.0, 0.0)]",
        "unique_name_in_owner": false,
        "visible": true
      },
      "type": "CanvasLayer"
    },
    {
      "name": "RearCamera",
      "properties": {
        "_import_path": "",
        "attributes": "<Object#null>",
        "auto_translate_mode": 0,
        "compositor": "<Object#null>",
        "cull_mask": 1048575,
        "current": false,
        "doppler_tracking": 0,
        "editor_description": "",
        "environment": "<Object#null>",
        "far": 4000.0,
        "fov": 75.0,
        "frustum_offset": "(0.0, 0.0)",
        "h_offset": 0.0,
        "keep_aspect": 1,
        "near": 0.0500000007450581,
        "physics_interpolation_mode": 0,
        "position": "(0.0, 1.45131, 0.0)",
        "process_mode": 0,
        "process_physics_priority": 0,
        "process_priority": 0,
        "process_thread_group": 0,
        "projection": 0,
        "rotation": "(0.0, 3.141593, 0.0)",
        "rotation_edit_mode": 0,
        "rotation_order": 2,
        "scale": "(1.0, 1.0, 1.0)",
        "script": null,
        "size": 1.0,
        "top_level": false,
        "transform": "[X: (-1.0, 0.0, -0.0), Y: (0.0, 1.0, 0.0), Z: (0.0, 0.0, -1.0), O: (0.0, 1.45131, 0.0)]",
        "unique_name_in_owner": false,
        "v_offset": 0.0,
        "visibility_parent": "",
        "visible": true
      },
      "type": "Camera3D"
    },
    {
      "name": "Node3D",
      "properties": {
        "_import_path": "",
        "auto_translate_mode": 0,
        "editor_description": "",
        "physics_interpolation_mode": 0,
        "position": "(0.0, 0.0, 0.0)",
        "process_mode": 0,
        "process_physics_priority": 0,
        "process_priority": 0,
        "process_thread_group": 0,
        "rotation": "(0.0, 0.0, 0.0)",
        "rotation_edit_mode": 0,
        "rotation_order": 2,
        "scale": "(1.0, 1.0, 1.0)",
        "script": "res://scene_to_json.gd",
        "top_level": false,
        "transform": "[X: (1.0, 0.0, 0.0), Y: (0.0, 1.0, 0.0), Z: (0.0, 0.0, 1.0), O: (0.0, 0.0, 0.0)]",
        "unique_name_in_owner": false,
        "visibility_parent": "",
        "visible": true
      },
      "script": "extends Node3D\n\nvar json_generated = false\n\nfunc _ready():\n\t# Only run in the editor when triggered\n\t#if Engine.is_editor_hint():\n\t\t#generate_json()\\\n\tpass\n\nfunc _input(event):\n\tif event is InputEventKey and event.pressed and event.keycode == KEY_SPACE and not json_generated:\n\t\tprint(\"JSON\")\n\t\tgenerate_json()\n\t\tjson_generated = true\n\nfunc generate_json():\n\tvar player = get_parent()  # Access the Player node\n\tvar json_data = {}\n\ttraverse_node(player, json_data, true)\n\tvar json_string = JSON.stringify(json_data, \"  \")  # Pretty-print with 2 spaces\n\tsave_to_file(json_string, \"res://player_data.json\")\n\tprint(\"JSON file generated at res://player_data.json\")\n\n#func traverse_node(node, is_main_tree = true):\n\t#print(\"node name \", node.name)\n\t#var data = {\n\t\t#\"name\": node.name,\n\t\t#\"type\": node.get_class(),\n\t\t#\"properties\": get_node_properties(node),\n\t\t#\"script\": get_script_content(node),\n\t\t#\"children\": []\n\t#}\n#\n\t## Handle instantiated scenes (e.g., weapon_visual.tscn)\n\t#if is_main_tree and node != get_tree().current_scene and node.get(\"scene_file_path\"):  # Check if this node instances a scene\n\t\t#var scene_path = node.get(\"scene_file_path\")\n\t\t#if ResourceLoader.exists(scene_path):\n\t\t\t#var packed_scene = load(scene_path) as PackedScene\n\t\t\t#if packed_scene:\n\t\t\t\t#var instanced = packed_scene.instantiate()\n\t\t\t\t#data[\"instanced_scene\"] = traverse_node(instanced, false)\n\t\t\t\t#instanced.queue_free()\n#\n\t## Recursively process children\n\t#for child in node.get_children():\n\t\t#data[\"children\"].append(traverse_node(child, is_main_tree))\n#\n\t#return data\n\t\nfunc traverse_node(node, parent_dict, is_main_tree = true):\n\tvar node_dict = {\n\t\t\"name\": node.name,\n\t\t\"type\": node.get_class()\n\t}\n\n\t# If this node instances a scene, include its path\n\tif node.scene_file_path:\n\t\tnode_dict[\"scene_file_path\"] = node.scene_file_path\n\n\t# Include the script if attached\n\tif node.script:\n\t\tnode_dict[\"script\"] = get_script_text(node.script)\n\n\t# Add node properties\n\tnode_dict[\"properties\"] = get_node_properties(node)\n\n\t# Process children\n\tvar children = []\n\tfor child in node.get_children():\n\t\tvar child_dict = {}\n\t\ttraverse_node(child, child_dict)\n\t\tchildren.append(child_dict)\n\tif children.size() > 0:\n\t\tnode_dict[\"children\"] = children\n\n\t# Assign this node's data to the parent dictionary\n\tfor key in node_dict:\n\t\tparent_dict[key] = node_dict[key]\n\nfunc get_script_text(script):\n\tvar source = script.source_code\n\treturn source if source else \"\"\n\nfunc get_node_properties(node):\n\tvar properties = {}\n\t# Get all properties from the Inspector\n\tfor prop in node.get_property_list():\n\t\tvar name = prop[\"name\"]\n\t\t# Filter out built-in properties if desired, or include all F\n\t\t# Only include properties that are stored or editable\n\t\tif prop[\"usage\"] & PROPERTY_USAGE_EDITOR or prop[\"usage\"] & PROPERTY_USAGE_STORAGE:\n\t\t\tvar value = node.get(name)\n\t\t\tif value is Resource:\n\t\t\t\tproperties[name] = serialize_resource(value)\n\t\t\telif value is Array:\n\t\t\t\tproperties[name] = serialize_array(value)\n\t\t\telse:\n\t\t\t\tproperties[name] = value\n\treturn properties\n\nfunc serialize_resource(resource):\n\tif resource is WeaponResource:\n\t\treturn {\n\t\t\t\"weapon_name\": resource.weapon_name,\n\t\t\t\"display_text\": resource.display_text,\n\t\t\t\"weapon_visual_scene\": resource.weapon_visual_scene.resource_path if resource.weapon_visual_scene else \"\"\n\t\t\t# Add more properties like ammo type, max ammo, etc., when you expand WeaponResource\n\t\t}\n\t# Fallback for other resources\n\treturn resource.resource_path if resource else \"\"\n\nfunc serialize_array(array):\n\tvar serialized = []\n\tfor item in array:\n\t\tif item is Resource:\n\t\t\tserialized.append(serialize_resource(item))\n\t\telse:\n\t\t\tserialized.append(item)\n\treturn serialized\n\nfunc get_script_content(node):\n\tif node.get_script():\n\t\tvar script = node.get_script()\n\t\tvar path = script.resource_path\n\t\tvar file = FileAccess.open(path, FileAccess.READ)\n\t\tif file:\n\t\t\treturn file.get_as_text()\n\treturn \"\"\n\nfunc save_to_file(content, path):\n\tvar file = FileAccess.open(path, FileAccess.WRITE)\n\tif file:\n\t\tfile.store_string(content)\n",
      "type": "Node3D"
    }
  ],
  "name": "Player",
  "properties": {
    "_import_path": "",
    "auto_translate_mode": 0,
    "axis_lock_angular_x": false,
    "axis_lock_angular_y": false,
    "axis_lock_angular_z": false,
    "axis_lock_linear_x": false,
    "axis_lock_linear_y": false,
    "axis_lock_linear_z": false,
    "collision_layer": 2,
    "collision_mask": 45,
    "collision_priority": 1.0,
    "disable_mode": 0,
    "editor_description": "",
    "floor_block_on_wall": true,
    "floor_constant_speed": false,
    "floor_max_angle": 0.785398185253143,
    "floor_snap_length": 0.100000001490116,
    "floor_stop_on_slope": true,
    "fly_speed": 10.0,
    "input_capture_on_drag": false,
    "input_ray_pickable": true,
    "jump_velocity": 500.0,
    "max_slides": 6,
    "motion_mode": 0,
    "physics_interpolation_mode": 0,
    "platform_floor_layers": 4294967295,
    "platform_on_leave": 0,
    "platform_wall_layers": 0,
    "position": "(0.0, -279.4999, 0.0)",
    "process_mode": 0,
    "process_physics_priority": 0,
    "process_priority": 0,
    "process_thread_group": 0,
    "rear_view_enabled": false,
    "rear_view_position": "(10.0, 10.0)",
    "rear_view_size": "(320.0, 180.0)",
    "rotation": "(0.0, -0.094, 0.0)",
    "rotation_edit_mode": 0,
    "rotation_order": 2,
    "safe_margin": 0.00100000004749745,
    "scale": "(1.0, 1.0, 1.0)",
    "script": "res://player/player2.gd",
    "sensitivity": 0.002,
    "slide_on_ceiling": true,
    "top_level": false,
    "transform": "[X: (0.995585, 0.0, 0.093862), Y: (0.0, 1.0, 0.0), Z: (-0.093862, 0.0, 0.995585), O: (0.0, -279.4999, 0.0)]",
    "unique_name_in_owner": false,
    "up_direction": "(0.0, 1.0, 0.0)",
    "velocity": "(0.0, -200.0, 0.0)",
    "visibility_parent": "",
    "visible": true,
    "wall_min_slide_angle": 0.261799395084381,
    "weapon_resources": [
      {
        "display_text": "PISTOL",
        "weapon_name": "Pistol",
        "weapon_visual_scene": "res://weapons/pistol/pistol_visual.tscn"
      },
      {
        "display_text": "LAZER RIFLE",
        "weapon_name": "Lazer Rifle",
        "weapon_visual_scene": "res://weapons/lazer rifle/lazer_rifle_visual.tscn"
      }
    ]
  },
  "scene_file_path": "res://player/player.tscn",
  "script": "# player.gd\n\nextends CharacterBody3D\n\n# --- Movement Variables ---\nvar walk_speed: float = GameConfig.player_x_speed\n@export var fly_speed: float = 10.0\n@export var jump_velocity: float = 4.5\n@export var sensitivity: float = 0.003 # Mouse sensitivity\n\n# --- Physics ---\n# Get the gravity from the project settings to be synced with RigidBody nodes.\n#var gravity: float = ProjectSettings.get_setting(\"physics/3d/default_gravity\")\n#var gravity: float = 600.0\n\nvar jump_time: int = 0\nvar max_jump_time: int = 7\nvar jump_initial_velocity: float = 200.0 # 16, 600\nvar jump_sustain_velocity: float = 100.0 # 100\nvar gravity: float = 38.0 # 5\nvar is_jumping: bool = false\nvar jump_held: bool = false\n\n\n# --- State ---\nenum MovementMode { NORMAL, FLY }\nvar current_mode: MovementMode = MovementMode.NORMAL\nvar target_velocity: Vector3 = Vector3.ZERO\n\n# --- Node References ---\n@onready var head: Node3D = $Head\n@onready var camera: Camera3D = $Head/Camera3D\n\n\n\n# --- Weapon Stuff ---\n@export var weapon_resources: Array[WeaponResource] = [] # Assign in Inspector\n@onready var weapon_holder: Node3D = $Head/WeaponHolder\nvar current_weapon_index: int = -1\nvar current_weapon_resource: WeaponResource = null\nvar current_weapon_visual_node: Node3D = null\nvar current_weapon_logic_script: BaseWeaponLogic = null # Reference to the logic script\n\n# ... (Rear view variables/setup if still needed for Dual Pistols) ...\n@export var rear_view_enabled: bool = false # Control via dual pistol logic\n@export var rear_view_size: Vector2 = Vector2(320, 180) # Variable size\n@export var rear_view_position: Vector2 = Vector2(10, 10) # Variable position\nvar rear_camera: Camera3D = null\nvar subviewport_container: SubViewportContainer = null\nvar subviewport: SubViewport = null\n\nfunc _ready():\n\t# Hide and capture the cursor for FPS controls\n\tInput.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)\n\t\n\t# ... (mouse capture, rear view setup) ...\n\tif weapon_resources.size() > 0:\n\t\tswitch_weapon(0)\n\telse:\n\t\tprint(\"No weapon resource assigned to player!\")\n\t\n\t# Setup Rear View references\n\trear_camera = $RearCamera # Assuming it's direct child of Player\n\tsubviewport_container = $CanvasLayer/RearViewContainer\n\tsubviewport = $CanvasLayer/RearViewContainer/RearViewport\n\tif rear_camera and subviewport_container and subviewport:\n\t\t# Assign the rear camera to the subviewport\n\t\tsubviewport.world_3d = get_world_3d() # Use the same world as the main camera\n\t\t# Link camera AFTER setting world_3d seems more reliable sometimes\n\t\t# We might need to assign the camera path or instance later if issues arise\n\t\t# For now, try direct assignment (may need adjustment)\n\t\t# This part is tricky; often needs setting via code or ensuring camera is IN the SubViewport's scene tree.\n\t\t# Alternative: Put RearCamera INSIDE RearViewport node. Let's try that first.\n\t\t\n\t\t# --- REVISED SETUP for Rear View ---\n\t\t# 1. In player.tscn, move RearCamera node to be a CHILD of RearViewport node.\n\t\t# 2. The code below assumes this structure.\n\t\t\n\t\trear_camera = $CanvasLayer/RearViewContainer/RearViewport/RearCamera\n\t\t\n\t\t# Apply initial size and position from exported vars\n\t\tsubviewport_container.size = rear_view_size\n\t\tsubviewport_container.position = rear_view_position\n\t\tsubviewport_container.visible = rear_view_enabled # Initially hidden unless set\n\t\t \n\t\t# Ensure SubViewport fills its container\n\t\tsubviewport.size = rear_view_size # Match container initially\n\t\tsubviewport_container.stretch = true # Allows viewport to scale within container\n\telse:\n\t\tprinterr(\"Rear view nodes not found correctly!\")\n\nfunc _unhandled_input(event: InputEvent):\n\t# Mouse look\n\tif event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:\n\t\t# Rotate player left/right (around Y axis)\n\t\tself.rotate_y(-event.relative.x * sensitivity)\n\t\t# Rotate camera up/down (around X axis) - Clamped\n\t\thead.rotate_x(-event.relative.y * sensitivity)\n\t\thead.rotation.x = clamp(head.rotation.x, deg_to_rad(-89), deg_to_rad(89))\n\t\t\n\t# Toggle mouse capture\n\tif event.is_action_pressed(\"ui_cancel\"): # Esc key\n\t\tInput.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)\n\tif event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and Input.get_mouse_mode() == Input.MOUSE_MODE_VISIBLE:\n\t\tInput.set_mouse_mode(Input.MOUSE_MODE_CAPTURED) # Recapture on click\n\t\t\n\t# Toggle Movement Mode\n\tif event.is_action_pressed(\"fly_mode_key\"): # '2' key\n\t\tif current_mode == MovementMode.NORMAL:\n\t\t\tcurrent_mode = MovementMode.FLY\n\t\t\tprint(\"Switched to Fly Mode\")\n\t\telse:\n\t\t\tcurrent_mode = MovementMode.NORMAL\n\t\t\tprint(\"Switched to Normal Mode\")\n\t\n\t## --- TEMP: Direct Fly Toggle with 'R' for testing ---\n\t#if event.is_action_just_pressed(\"fly_toggle\"): # 'R' key\n\t\t#if current_mode == MovementMode.NORMAL:\n\t\t\t#current_mode = MovementMode.FLY\n\t\t\t#print(\"Toggled Fly Mode ON (R)\")\n\t\t#else:\n\t\t\t#current_mode = MovementMode.NORMAL\n\t\t\t#print(\"Toggled Fly Mode OFF (R)\")\n\t## --- End TEMP ---\n\t\n\t# Weapon Switching Input\n\tif Input.is_action_just_pressed(\"pistol\"):\n\t\tswitch_weapon(0)\n\tif Input.is_action_just_pressed(\"dual pistol\"):\n\t\tswitch_weapon(1)\n\t#if Input.is_action_just_pressed(\"weapon_3\"):\n\t\t#switch_weapon(2)\n\t#if Input.is_action_just_pressed(\"weapon_4\"):\n\t\t#switch_weapon(3)\n\t#if Input.is_action_just_pressed(\"weapon_5\"):\n\t\t#switch_weapon(4)\n\t\n\t# Check for fire input ONLY (logic moved to weapon script)\n\tif Input.is_action_pressed(\"shoot\"):\n\t\tif current_weapon_logic_script:\n\t\t\tcurrent_weapon_logic_script.try_fire()\n\t\n\t# Check for fire release (for weapons that aren't automatic\n\tif Input.is_action_just_released(\"shoot\"):\n\t\tif current_weapon_logic_script:\n\t\t\tcurrent_weapon_logic_script.on_fire_input_released()\n\nfunc switch_weapon(index: int):\n\tif index < 0 or index >= weapon_resources.size(): return\n\tif index == current_weapon_index: return\n\n\t# --- Unequip Old Weapon ---\n\tif current_weapon_logic_script:\n\t\tcurrent_weapon_logic_script.unequip()\n\tif current_weapon_visual_node:\n\t\tcurrent_weapon_visual_node.queue_free()\n\t\tcurrent_weapon_visual_node = null\n\t\tcurrent_weapon_logic_script = null\n\n\t# --- Equip New Weapon ---\n\tcurrent_weapon_index = index\n\tcurrent_weapon_resource = weapon_resources[current_weapon_index]\n\n\tif not current_weapon_resource or not current_weapon_resource.weapon_visual_scene:\n\t\tprinterr(\"Invalid weapon resource or visual scene for index: \", index)\n\t\tcurrent_weapon_index = -1\n\t\tcurrent_weapon_resource = null\n\t\treturn\n\n\tprint(\"Switching to weapon: \", current_weapon_resource.weapon_name)\n\n\t# Instantiate visual scene\n\tcurrent_weapon_visual_node = current_weapon_resource.weapon_visual_scene.instantiate()\n\tweapon_holder.add_child(current_weapon_visual_node)\n\n\t# Find the logic script attached (assuming it's on the root of the visual scene)\n\tcurrent_weapon_logic_script = current_weapon_visual_node.get_node_or_null(\"WeaponLogic\") as BaseWeaponLogic\n\t# NOTE: The node containing the script MUST be named \"WeaponLogic\" OR be the root and have the script directly attached.\n\t# If script is on the root: current_weapon_logic_script = current_weapon_visual_node as BaseWeaponLogic \n\t# Let's assume you add a child Node named \"WeaponLogic\" to your visual scenes and attach the script there.\n\n\tif current_weapon_logic_script:\n\t\t# Pass references the weapon script might need\n\t\tcurrent_weapon_logic_script.player_reference = self\n\t\tcurrent_weapon_logic_script.muzzle_reference = current_weapon_visual_node.get_node_or_null(\"Muzzle\") as Marker3D # Find Muzzle within the visual node\n\t\tcurrent_weapon_logic_script.equip() # Notify script it's equipped\n\t\tprint(\"Weapon logic script found and configured.\")\n\telse:\n\t\tprinterr(\"!!! Failed to find BaseWeaponLogic script on visual node: \", current_weapon_visual_node.name)\n\t\t# Clean up partially created weapon\n\t\tcurrent_weapon_visual_node.queue_free()\n\t\tcurrent_weapon_visual_node = null\n\t\tcurrent_weapon_index = -1\n\t\tcurrent_weapon_resource = null\n\t\treturn # Stop equip process\n\n\t# Update text label (assuming Label3D is still direct child of visual node root)\n\tvar label = current_weapon_visual_node.get_node_or_null(\"Label3D\") as Label3D\n\tif label:\n\t\tlabel.text = current_weapon_resource.display_text\n\t\t\n\t# Handle Dual Pistol Rear View specifically if needed\n\t# rear_view_enabled = (current_weapon_resource.weapon_name == \"Dual Pistols\")\n\t# if subviewport_container: subviewport_container.visible = rear_view_enabled\n\nfunc _physics_process(delta: float):\n\t# --- Calculate Movement Direction ---\n\tvar input_dir: Vector2 = Input.get_vector(\"move_left\", \"move_right\", \"move_forward\", \"move_backward\")\n\t# Transform direction based on player's rotation (basis vectors)\n\tvar direction: Vector3 = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()\n\t#print(\"player jump time \", jump_time)\n\t# --- Handle Velocity based on Mode ---\n\tif current_mode == MovementMode.NORMAL:\n\t\t# Apply gravity\n\t\tprint(\"player on floor? \", is_on_floor())\n\t\tvar jump_pressed: bool = Input.is_action_pressed(\"jump\")\n\t\tif not jump_pressed:\n\t\t\tjump_time = 0\n\t\tprint(\"player jumping? \", jump_pressed)\n\t\t\n\t\tif is_on_floor():\n\t\t\ttarget_velocity.y = 0\n\t\t\t\n\t\t\tif jump_pressed:\n\t\t\t\tprint(\"\")\n\t\t\t\tprint(\"\")\n\t\t\t\tprint(\"player jump pressed\")\n\t\t\t\tis_jumping = true\n\t\t\t\tjump_time = 0\n\t\t\t\ttarget_velocity.y = jump_initial_velocity\n\t\t\tjump_held = jump_pressed\n\t\telse:\n\t\t\tprint(\"player not on floor, jumping? \", is_jumping)\n\t\t\tif is_jumping:\n\t\t\t\tprint(\"player not on floor, and is jumping \", jump_pressed, \" \", jump_time, \" \", max_jump_time)\n\t\t\t\tif jump_pressed and jump_time < max_jump_time:\n\t\t\t\t\ttarget_velocity.y += jump_sustain_velocity\n\t\t\t\t\tjump_time += 1\n\t\t\t\telse:\n\t\t\t\t\tis_jumping = false\n\t\t\ttarget_velocity.y = max(target_velocity.y - gravity, -200)\n\t\t\t\n\t\t\tif not jump_pressed:\n\t\t\t\tjump_held = false\n\t\t\t\tis_jumping = false\n\t\t\n\t\tif is_on_ceiling():\n\t\t\tprint(\"player in on ceiling\")\n\t\t\ttarget_velocity.y = 0\n\t\t\tis_jumping = false\n\t\t\n\t\tprint(\"player target velocity \", target_velocity)\n\t\t\n\t\t#if not is_on_floor():\n\t\t\t#target_velocity.y -= gravity * delta\n\t\t#else:\n\t\t\t## Reset vertical velocity slightly below zero to help stick to slopes\n\t\t\t#if target_velocity.y < 0:\n\t\t\t\t#target_velocity.y = -0.1\n\t\t#\n\t\t## Handle Jump\n\t\t#if Input.is_action_just_pressed(\"jump\") and is_on_floor():\n\t\t\t#target_velocity.y = jump_velocity\n\t\t\n\t\t# Horizontal Velocity\n\t\tif direction:\n\t\t\ttarget_velocity.x = direction.x * walk_speed\n\t\t\ttarget_velocity.z = direction.z * walk_speed\n\t\telse:\n\t\t\t# Apply friction/damping if no input\n\t\t\ttarget_velocity.x = move_toward(target_velocity.x, 0, walk_speed)\n\t\t\ttarget_velocity.z = move_toward(target_velocity.z, 0, walk_speed)\n\t\n\telif current_mode == MovementMode.FLY:\n\t\t# No gravity in fly mode\n\t\ttarget_velocity = Vector3.ZERO \n\t\t\n\t\t# Get fly direction based on camera view\n\t\tvar fly_direction: Vector3 = -camera.global_transform.basis.z # Forward vector of camera\n\t\t\n\t\t# Basic Fly Controls (can be expanded)\n\t\tif Input.is_action_pressed(\"move_forward\"):\n\t\t\ttarget_velocity += fly_direction * fly_speed\n\t\tif Input.is_action_pressed(\"move_backward\"):\n\t\t\ttarget_velocity -= fly_direction * fly_speed\n\t\tif Input.is_action_pressed(\"move_left\"):\n\t\t\ttarget_velocity -= camera.global_transform.basis.x * fly_speed # Left vector\n\t\tif Input.is_action_pressed(\"move_right\"):\n\t\t\ttarget_velocity += camera.global_transform.basis.x * fly_speed # Right vector\n\t\tif Input.is_action_pressed(\"jump\"): # Fly Up\n\t\t\ttarget_velocity += Vector3.UP * fly_speed\n\t\t# Add a key for flying down if needed (e.g., Shift or C)\n\t\tif Input.is_action_pressed(\"fly_down\"):\n\t\t\ttarget_velocity += Vector3.DOWN * fly_speed\n\t\n\t # --- Apply Movement ---\n\tvelocity = target_velocity\n\tmove_and_slide()\n\t#var collision_info = move_and_collide(velocity * delta)\n\t# Update target_velocity after move_and_slide for next frame's gravity/friction calc\n\t#if collision_info:\n\t\t#var collider = collision_info.get_collider()\n\t\t#print(\"player collision layer \", collider.collision_layer)\n\tif get_slide_collision_count() > 0:\n\t\tfor i in range(get_slide_collision_count()):\n\t\t\tvar collision = get_slide_collision(i)\n\t\t\tprint(\"player collision \", collision, \" \", collision.get_collider(), \" \", collision.get_collider().get_collision_layer())\n\t\t\tif collision.get_collider().get_collision_layer() & GameConfig.CRATE_LAYER != 0:\n\t\t\t\tvar crate = collision.get_collider()\n\t\t\t\tcrate.handle_player_collision()\n\ttarget_velocity = velocity\n\t\n\t#if current_weapon_resource:\n\t\t#if current_weapon_resource.automatic:\n\t\t\t#if Input.is_action_pressed(\"fire\") and can_shoot:\n\t\t\t\t#shoot()\n\t\n\t# Check for fire input ONLY (logic moved to weapon script)\n\tif Input.is_action_pressed(\"shoot\"): # Use is_action_pressed for automatic weapons\n\t\tif current_weapon_logic_script:\n\t\t\tcurrent_weapon_logic_script.try_fire() \n",
  "type": "CharacterBody3D"
}